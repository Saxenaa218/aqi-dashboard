{"version":3,"sources":["utils/constants.ts","utils/functions.ts","redux/index.ts","redux/reducer.ts","redux/store.ts","components/HistoryChart/HistoryChart.tsx","components/Table/components/TableRow/TableRow.tsx","components/Table/Table.tsx","pages/Home/Home.tsx","hooks/useSocket.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SET_HISTORY_DATA","getAQIColorClass","aqi","initialState","historyObject","rootReducer","state","action","type","payload","store","createStore","HistoryChart","useSelector","chartComponentRef","useRef","useState","series","setSeries","categories","setCategories","useEffect","createSeries","totalAqis","Object","keys","each","push","map","itm","timeStamp","baseStructure","color","dashStyle","showInLegend","marker","radius","name","data","className","highcharts","Highcharts","options","chart","title","text","xAxis","yAxis","plotOptions","line","dataLabels","enabled","enableMouseTracking","credits","ref","TableRow","city","tableHeadings","Table","historyArr","eachItm","historyItemLastIndex","length","Home","socket","setSocket","newSocket","io","transports","close","useSocket","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d816d15.chunk.js","sourcesContent":["export const SET_HISTORY_DATA = \"SET_HISTORY_DATA\";","export const getAQIColorClass = (aqi: number) => {\n    if (0<=aqi && aqi<=50) return \"green\";\n    else if (51<=aqi && aqi<=100) return \"light-green\";\n    else if (101<=aqi && aqi<=200) return \"yellow\";\n    else if (201<=aqi && aqi<=300) return \"orange\";\n    else if (301<=aqi && aqi<=400) return \"red\";\n    else if (401<=aqi && aqi<=500) return \"dark-red\";\n    else return \"\";\n}","export * from \"./actions\";\nexport * from \"./reducer\";\nexport * from \"./store\";\nexport * from \"./types\";\n","import { StateTypes, actionTypes } from \"./types\";\nimport { SET_HISTORY_DATA } from \"../utils\";\n\nconst initialState: StateTypes = {\n  historyObject: {\n    \"Delhi\": [\n      {\n        \"city\": \"Delhi\",\n        \"aqi\": 303.9955573644944,\n        \"timeStamp\": 23\n      },\n      {\n        \"city\": \"Delhi\",\n        \"aqi\": 303.0473196100626,\n        \"timeStamp\": 1111111\n      }\n    ],\n    \"Mumbai\": [\n      {\n        \"city\": \"Mumbai\",\n        \"aqi\": 180.4532880409185,\n        \"timeStamp\": 23433\n      }\n    ],\n    \"Bengaluru\": [\n      {\n        \"city\": \"Bengaluru\",\n        \"aqi\": 90.23942071701057,\n        \"timeStamp\": 2343223\n      }\n    ]\n  }\n};\n\nconst rootReducer = (state: StateTypes = initialState, action: actionTypes) => {\n  switch (action.type) {\n    case SET_HISTORY_DATA:\n      return { ...state, historyObject: action.payload };\n    default:\n      return { ...state };\n  }\n};\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducer\";\n\nexport const store = createStore(rootReducer);\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { StateTypes } from '../../redux'; \nimport { TableItemTypes } from '../Table/types';\nimport \"./HistoryChart.scss\";\n\nconst HistoryChart: React.FC = () => {\n    const historyObject: any = useSelector((state: StateTypes) => state.historyObject);\n    const chartComponentRef = useRef<HighchartsReact.RefObject>(null);\n    const [series, setSeries] = useState<any>([]);\n    const [categories, setCategories] = useState<any>([]);\n\n    useEffect(() => {\n        setSeries(createSeries());\n    }, [historyObject])\n    \n    useEffect(() => {\n        const totalAqis = [];\n        for (const each of Object.keys(historyObject)) {\n            totalAqis.push(...historyObject[each].map((itm: TableItemTypes) => itm.timeStamp));\n        }\n        setCategories(totalAqis);\n    }, [])\n\n    const createSeries = () => {\n        const baseStructure = {\n            type: \"line\",\n            color: 'blue',\n            dashStyle: 'Solid',\n            showInLegend: true,\n            marker: {\n                radius: 2\n            }\n        }\n        return Object.keys(historyObject).map((itm: string) => {\n            return {\n                ...baseStructure,\n                name: itm,\n                data: historyObject[itm].map((itm: TableItemTypes) => itm.aqi)\n            }\n        })\n    }\n\n    type GetOptionsTypes = () => Highcharts.Options\n\n    const getOptions: GetOptionsTypes = () => ({\n        chart: {\n            type: 'line'\n        },\n        title: {\n            text: 'Cities with AQI history'\n        },\n        xAxis: {\n            categories: categories\n        },\n        yAxis: {\n            title: {\n                text: 'AQI (Air quality index)'\n            }\n        },\n        plotOptions: {\n            line: {\n                dataLabels: {\n                    enabled: true\n                },\n                enableMouseTracking: false\n            }\n        },\n        series: series,\n        credits: {\n            enabled: false\n        }\n    })\n    return (\n        <section className=\"history-chart\">\n            <HighchartsReact\n                highcharts={Highcharts}\n                options={getOptions()}\n                ref={chartComponentRef}\n            />\n        </section>\n    )\n}\n\nexport default HistoryChart;","import React from 'react';\nimport { getAQIColorClass } from \"../../../../utils\";\nimport { TableRowPropTypes } from \"../../types\";\nimport \"./TableRow.scss\";\n\nconst TableRow: React.FC<TableRowPropTypes> = ({ itm }) => {\n    return (\n        <tr className=\"table-row\">\n            <td>{itm.city}</td>\n            <td className={getAQIColorClass(itm.aqi)}>{itm.aqi}</td>\n            <td>{itm.timeStamp}</td>\n        </tr>\n    )\n}\n\nexport default TableRow;","import React from 'react';\nimport { useSelector } from \"react-redux\";\nimport { TableItemTypes } from './types';\nimport { StateTypes } from '../../redux';\nimport TableRow from './components/TableRow';\nimport \"./Table.scss\";\n\nconst tableHeadings: string[] = [\n    \"City\", \"Current AQI\", \"Last Updated\"\n];\n\nconst Table: React.FC = () => {\n    const historyObject: any = useSelector((state: StateTypes) => state.historyObject);\n    const historyArr = Object.keys(historyObject);\n    return (\n        <section className=\"table\">\n            <table>\n                <thead>\n                    <tr>\n                        {tableHeadings.map((itm: string) => <th key={itm}>{itm}</th>)}\n                    </tr>\n                </thead>\n                <tbody>\n                    {historyArr.map((eachItm: string) => {\n                        const historyItemLastIndex: number = historyObject[eachItm].length-1;\n                        const itm: TableItemTypes = historyObject[eachItm][historyItemLastIndex];\n                        return <TableRow itm={itm} key={`${itm.city}-${itm.aqi}`} />\n                    })}\n                </tbody>\n            </table>\n        </section>\n    )\n}\n\nexport default Table;","import React from 'react';\nimport HistoryChart from '../../components/HistoryChart';\nimport Table from '../../components/Table';\nimport { useSocket } from '../../hooks';\nimport \"./Home.scss\";\n\nconst Home: React.FC = () => {\n    const socket = useSocket();\n    console.log(socket)\n\n    return (\n        <div className=\"home\">\n            <header>\n                <h2>Live City wise AQI Chart (Air Quality Index)</h2>\n            </header>\n            <main className=\"body\">\n                <Table />\n                <HistoryChart />\n            </main>\n        </div>\n    )\n}\n\nexport default Home;","import { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nexport const useSocket = () => {\n    const [socket, setSocket] = useState();\n    useEffect(() => {\n        const newSocket: any = io(\n            \"ws://city-ws.herokuapp.com\",\n            {\n                transports: ['websocket']\n            }\n        )\n        setSocket(newSocket);\n        return () => newSocket.close();\n    }, [])\n    return socket;\n}","import { Provider } from 'react-redux';\nimport Home from './pages/Home';\nimport { store } from './redux';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Home />\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}