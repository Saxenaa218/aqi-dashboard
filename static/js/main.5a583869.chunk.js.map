{"version":3,"sources":["utils/constants.ts","utils/functions.ts","redux/index.ts","redux/reducer.ts","redux/actions.ts","redux/store.ts","components/HistoryChart/HistoryChart.tsx","components/Table/components/TableRow/TableRow.tsx","components/Table/Table.tsx","pages/Home/Home.tsx","hooks/useSocket.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SET_HISTORY_DATA","getAQIColorClass","aqi","getTimeForChart","timeStamp","time","Date","hours","getHours","minutes","getMinutes","getSeconds","initialState","historyObject","rootReducer","state","action","type","payload","setHistoryObject","socketResp","store","getState","resultObject","JSON","parse","stringify","each","eachObject","now","city","length","shift","push","dispatch","createStore","HistoryChart","useSelector","chartComponentRef","useRef","useState","series","setSeries","categories","setCategories","useEffect","createSeries","allTimeStamps","Object","keys","map","itm","baseStructure","color","dashStyle","showInLegend","marker","radius","name","data","className","highcharts","Highcharts","options","chart","title","text","xAxis","yAxis","tooltip","borderColor","plotOptions","line","dataLabels","enabled","enableMouseTracking","credits","ref","TableRow","toFixed","toLocaleString","replace","tableHeadings","Table","historyArr","eachItm","historyItemLastIndex","Home","socket","setSocket","newSocket","WebSocket","close","useSocket","onmessage","event","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a583869.chunk.js","sourcesContent":["export const SET_HISTORY_DATA = \"SET_HISTORY_DATA\";","export const getAQIColorClass = (aqi: number) => {\n    if (0<=aqi && aqi<=50) return \"green\";\n    else if (50<aqi && aqi<=100) return \"light-green\";\n    else if (100<aqi && aqi<=200) return \"yellow\";\n    else if (200<aqi && aqi<=300) return \"orange\";\n    else if (300<aqi && aqi<=400) return \"red\";\n    else if (400<aqi && aqi<=500) return \"dark-red\";\n    else return \"\";\n}\n\nexport const getTimeForChart = (timeStamp: number) => {\n    const time = new Date(timeStamp);\n    const hours = time.getHours();\n    const minutes = time.getMinutes();\n    return `${hours}:${minutes < 10 ? '0' + minutes : minutes}:${time.getSeconds()} ${hours >= 12 ? 'pm' : 'am'}`\n}","export * from \"./actions\";\nexport * from \"./reducer\";\nexport * from \"./store\";\nexport * from \"./types\";\n","import { StateTypes, actionTypes } from \"./types\";\nimport { SET_HISTORY_DATA } from \"../utils\";\n\nconst initialState: StateTypes = {\n  historyObject: {}\n};\n\nconst rootReducer = (state: StateTypes = initialState, action: actionTypes) => {\n  switch (action.type) {\n    case SET_HISTORY_DATA:\n      return { ...state, historyObject: action.payload };\n    default:\n      return { ...state };\n  }\n};\n\nexport default rootReducer;\n","import { store } from \".\";\nimport { TableItemTypes } from \"../components/Table/types\";\nimport { SET_HISTORY_DATA } from \"../utils\";\n\nexport const setHistoryObject = (socketResp: TableItemTypes[]) => {\n  const { historyObject } = store.getState();\n  const resultObject = JSON.parse(JSON.stringify(historyObject));\n  for (const each of socketResp) {\n    // using 10 length as a barrier for the queue\n    const eachObject = { ...each, timeStamp: Date.now() };\n    if (resultObject[each.city]?.length === 10) {\n      resultObject[each.city].shift();\n      resultObject[each.city].push(eachObject);\n    }\n    else if (resultObject[each.city]?.length<10) {\n      resultObject[each.city].push(eachObject);\n    }\n    else {\n      resultObject[each.city] = [];\n      resultObject[each.city].push(eachObject);\n    }\n  }\n  store.dispatch({\n    type: SET_HISTORY_DATA,\n    payload: resultObject,\n  });\n};\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducer\";\n\nexport const store = createStore(rootReducer);\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { StateTypes } from '../../redux'; \nimport { TableItemTypes } from '../Table/types';\nimport { getTimeForChart } from '../../utils';\nimport \"./HistoryChart.scss\";\n\nconst HistoryChart: React.FC = () => {\n    const historyObject: any = useSelector((state: StateTypes) => state.historyObject);\n    const chartComponentRef = useRef<HighchartsReact.RefObject>(null);\n    const [series, setSeries] = useState<any>([]);\n    const [categories, setCategories] = useState<any>([]);\n\n    useEffect(() => {\n        setSeries(createSeries());\n    }, [historyObject])\n    \n    useEffect(() => {\n        const allTimeStamps = [];\n        for (const each of Object.keys(historyObject)) {\n            allTimeStamps.push(...historyObject[each].map((itm: TableItemTypes) => getTimeForChart(itm.timeStamp)));\n        }\n        setCategories(allTimeStamps);\n    }, [historyObject])\n\n    const createSeries = () => {\n        const baseStructure = {\n            type: \"spline\",\n            color: 'grey',\n            dashStyle: 'Solid',\n            showInLegend: true,\n            marker: {\n                radius: 2\n            }\n        }\n        return Object.keys(historyObject).map((itm: string) => {\n            return {\n                ...baseStructure,\n                name: itm,\n                data: historyObject[itm].map((itm: TableItemTypes) => itm.aqi)\n            }\n        })\n    }\n\n    type GetOptionsTypes = () => Highcharts.Options\n\n    const getOptions: GetOptionsTypes = () => ({\n        chart: {\n            type: 'line'\n        },\n        title: {\n            text: 'Cities with AQI history'\n        },\n        xAxis: {\n            categories: categories\n        },\n        yAxis: {\n            title: {\n                text: 'AQI (Air quality index)'\n            }\n        },\n        tooltip: {\n            borderColor: '#2c3e50'\n        },\n        plotOptions: {\n            line: {\n                dataLabels: {\n                    enabled: true\n                },\n                enableMouseTracking: true\n            }\n        },\n        series: series,\n        credits: {\n            enabled: false\n        }\n    })\n    return (\n        <section className=\"history-chart\">\n            <HighchartsReact\n                highcharts={Highcharts}\n                options={getOptions()}\n                ref={chartComponentRef}\n            />\n        </section>\n    )\n}\n\nexport default HistoryChart;","import React from 'react';\nimport { getAQIColorClass } from \"../../../../utils\";\nimport { TableRowPropTypes } from \"../../types\";\nimport \"./TableRow.scss\";\n\nconst TableRow: React.FC<TableRowPropTypes> = ({ itm }) => {\n    return (\n        <tr className=\"table-row\">\n            <td>{itm.city}</td>\n            <td className={getAQIColorClass(itm.aqi)}>{itm.aqi.toFixed(2)}</td>\n            <td>{new Date(itm.timeStamp).toLocaleString().replace(\" GMT\", \"\")}</td>\n        </tr>\n    )\n}\n\nexport default TableRow;","import React from 'react';\nimport { useSelector } from \"react-redux\";\nimport { TableItemTypes } from './types';\nimport { StateTypes } from '../../redux';\nimport TableRow from './components/TableRow';\nimport \"./Table.scss\";\n\nconst tableHeadings: string[] = [\n    \"City\", \"Current AQI\", \"Last Updated\"\n];\n\nconst Table: React.FC = () => {\n    const historyObject: any = useSelector((state: StateTypes) => state.historyObject);\n    const historyArr = Object.keys(historyObject);\n    return (\n        <section className=\"table\">\n            <table>\n                <thead>\n                    <tr>\n                        {tableHeadings.map((itm: string) => <th key={itm}>{itm}</th>)}\n                    </tr>\n                </thead>\n                <tbody>\n                    {historyArr.map((eachItm: string) => {\n                        const historyItemLastIndex: number = historyObject[eachItm].length-1;\n                        const itm: TableItemTypes = historyObject[eachItm][historyItemLastIndex];\n                        return <TableRow itm={itm} key={`${itm.city}-${itm.aqi}`} />\n                    })}\n                </tbody>\n            </table>\n        </section>\n    )\n}\n\nexport default Table;","import React from 'react';\nimport HistoryChart from '../../components/HistoryChart';\nimport Table from '../../components/Table';\nimport { useSocket } from '../../hooks';\nimport { setHistoryObject } from '../../redux';\nimport \"./Home.scss\";\n\nconst Home: React.FC = () => {\n    const socket = useSocket();\n    if (socket) {\n        socket.onmessage = (event: MessageEvent) => {\n            setHistoryObject(JSON.parse(event.data));\n        };\n    }\n\n    return (\n        <div className=\"home\">\n            <header>\n                <h2>Live City wise AQI Chart (Air Quality Index)</h2>\n            </header>\n            <main className=\"body\">\n                <Table />\n                <HistoryChart />\n            </main>\n        </div>\n    )\n}\n\nexport default Home;","import { useState, useEffect } from 'react';\n\nexport const useSocket = () => {\n    const [socket, setSocket] = useState<WebSocket>();\n    useEffect(() => {\n        const newSocket = new WebSocket(\"wss://city-ws.herokuapp.com\");\n        setSocket(newSocket);\n        return () => newSocket.close();\n    }, [])\n    return socket;\n}","import { Provider } from 'react-redux';\nimport Home from './pages/Home';\nimport { store } from './redux';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Home />\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}